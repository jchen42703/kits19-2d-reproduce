from tqdm import tqdm
import inspect
import torch

from kits19cnn.inference.utils import remove_3D_connected_components
from kits19cnn.inference.predictors import BasePredictor

class General3DPredictor(BasePredictor):
    """
    Inference for a single model for every file generated by `test_loader`.
    Predictions are saved in `out_dir`.

    Predictions are done on the resized predictions. Post-processing only includes
    removing small 3D connected components.

    """
    def __init__(self, out_dir, model, test_loader,
                 pseudo_3D=True, pred_3D_params={"do_mirroring": True}):
        """
        Attributes
            out_dir (str): path to the output directory to store predictions
            model (torch.nn.Module): class with the `predict_3D` method for
                predicting a single patient volume.
            test_loader: Iterable instance for generating data
                (pref. torch DataLoader)
                must have the __len__ arg.
            pred_3D_params (dict): kwargs for `model.predict_3D`
            pseudo_3D (bool): whether or not to have pseudo 3D inputs
        """
        super().__init__(out_dir=out_dir, model=model, test_loader=test_loader)
        assert inspect.ismethod(model.predict_3D), \
                "model must have the method `predict_3D`"
        if pseudo_3D:
            assert inspect.ismethod(model.predict_3D_pseudo3D_2Dconv), \
                "model must have the method `predict_3D_pseudo3D_2Dconv`"
        self.pseudo_3D = pseudo_3D
        self.pred_3D_params = pred_3D_params

    def run_3D_predictions(self, min_size=5000):
        """
        Runs predictions on the dataset (specified in test_loader)
        """
        cases = self.test_loader.dataset.im_ids
        assert len(cases) == len(self.test_loader)
        for (test_batch, case) in tqdm(zip(self.test_loader, cases), total=len(cases)):
            test_x = torch.squeeze(test_batch[0], dim=0)
            if self.pseudo_3D:
                pred, _, act, _ = self.model.predict_3D_pseudo3D_2Dconv(test_x,
                                                                        **self.pred_3D_params)
            else:
                pred, _, act, _ = self.model.predict_3D(test_x,
                                                        **self.pred_3D_params)
            assert len(pred.shape) == 3
            assert len(act.shape) == 4
            pred = remove_3D_connected_components(pred, min_size=min_size)
            self.save_pred(pred, act, case)
